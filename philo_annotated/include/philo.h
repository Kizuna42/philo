/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kizuna <kizuna@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/12/19 00:00:00 by student           #+#    #+#             */
/*   Updated: 2025/05/27 18:50:26 by kizuna           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
 * ============================================================================
 * PHILOSOPHERS PROJECT - ヘッダーファイル
 * ============================================================================
 *
 * このファイルは哲学者問題（Dining Philosophers Problem）を解決するための
 * 全ての構造体、関数プロトタイプ、必要なヘッダーファイルを定義しています。
 *
 * 哲学者問題とは：
 * - N人の哲学者が円卓に座り、各哲学者の間にフォークが1本ずつある
 * - 哲学者は「考える」「食べる」「寝る」の3つの状態を繰り返す
 * - 食事には2本のフォーク（左右）が必要
 * - デッドロックや餓死を避けながら、全員が食事できるようにする
 * ============================================================================
 */

#ifndef PHILO_H
# define PHILO_H

/* ============================================================================
 * 必要なヘッダーファイル
 * ============================================================================ */
# include <stdio.h>      // printf, scanf等の標準入出力関数
# include <stdlib.h>     // malloc, free, exit等のメモリ管理・プログラム制御
# include <unistd.h>     // usleep, write等のシステムコール
# include <string.h>     // 文字列操作関数（今回はあまり使用しない）
# include <pthread.h>    // スレッド関連の関数とmutex
# include <sys/time.h>   // gettimeofday等の時間取得関数

/* ============================================================================
 * 哲学者構造体 (t_philo)
 * ============================================================================
 * 各哲学者の状態と必要な情報を保持する構造体
 * この構造体のインスタンスが各哲学者スレッドに渡される
 */
typedef struct s_philo
{
	/* スレッド関連 */
	pthread_t		thread;          // この哲学者のスレッドID

	/* 哲学者の基本情報 */
	int				id;              // 哲学者の識別番号（1から開始）
	int				eating;          // 現在食事中かどうかのフラグ（0 or 1）
	int				meals_eaten;     // これまでに食べた食事の回数

	/* 時間関連の情報 */
	size_t			last_meal;       // 最後に食事を開始した時刻（ミリ秒）
	size_t			time_to_die;     // 死亡までの時間（ミリ秒）
	size_t			time_to_eat;     // 食事にかかる時間（ミリ秒）
	size_t			time_to_sleep;   // 睡眠時間（ミリ秒）
	size_t			start_time;      // プログラム開始時刻（基準時刻）

	/* プログラム設定 */
	int				num_of_philos;   // 哲学者の総数
	int				num_times_to_eat; // 各哲学者が食べるべき回数（-1なら無制限）

	/* 共有リソースへのポインタ */
	int				*dead;           // 誰かが死んだかどうかのフラグへのポインタ
	pthread_mutex_t	*r_fork;         // 右のフォークのmutexへのポインタ
	pthread_mutex_t	*l_fork;         // 左のフォークのmutexへのポインタ
	pthread_mutex_t	*write_lock;     // 出力用のmutexへのポインタ
	pthread_mutex_t	*dead_lock;      // 死亡フラグ用のmutexへのポインタ
	pthread_mutex_t	*meal_lock;      // 食事関連データ用のmutexへのポインタ
}					t_philo;

/* ============================================================================
 * プログラム管理構造体 (t_program)
 * ============================================================================
 * プログラム全体の状態と共有リソースを管理する構造体
 * メインスレッドがこの構造体を管理し、各哲学者スレッドからアクセスされる
 */
typedef struct s_program
{
	/* 共有状態フラグ */
	int				dead_flag;       // 誰かが死んだかどうかのフラグ

	/* 共有リソース保護用のmutex */
	pthread_mutex_t	dead_lock;       // dead_flagへの排他制御
	pthread_mutex_t	meal_lock;       // 食事関連データへの排他制御
	pthread_mutex_t	write_lock;      // 標準出力への排他制御

	/* 哲学者配列 */
	t_philo			*philos;         // 全哲学者の配列へのポインタ
}					t_program;

/* ============================================================================
 * 関数プロトタイプ宣言
 * ============================================================================ */

/* ----------------------------------------------------------------------------
 * utils.c - ユーティリティ関数群
 * 基本的な文字列処理、時間処理、数値変換などの汎用関数
 * ---------------------------------------------------------------------------- */
int		ft_atoi(const char *str);        // 文字列を整数に変換（atoiの自作版）
int		ft_isdigit(int c);               // 文字が数字かどうか判定
int		ft_strlen(const char *s);        // 文字列の長さを取得
size_t	get_current_time(void);          // 現在時刻をミリ秒で取得
int		ft_usleep(size_t milliseconds);  // 指定時間スリープ（usleepの改良版）

/* ----------------------------------------------------------------------------
 * input.c - 入力検証関数群
 * コマンドライン引数の妥当性をチェックする関数
 * ---------------------------------------------------------------------------- */
int		check_input(int argc, char **argv);    // 引数の数と形式をチェック
int		check_valid_args(char **argv);         // 引数の値が有効かチェック

/* ----------------------------------------------------------------------------
 * init.c - 初期化関数群
 * プログラム、哲学者、フォークなどの初期化を行う関数
 * ---------------------------------------------------------------------------- */
void	init_program(t_program *program, t_philo *philos);  // プログラム構造体の初期化
void	init_forks(pthread_mutex_t *forks, int philo_num);  // フォーク（mutex）の初期化
void	init_philos(t_philo *philos, t_program *program,    // 哲学者構造体の初期化
			pthread_mutex_t *forks, char **argv);

/* ----------------------------------------------------------------------------
 * threads.c - スレッド管理関数群
 * 哲学者スレッドの作成と実行ルーチンを管理する関数
 * ---------------------------------------------------------------------------- */
int		thread_create(t_program *program, pthread_mutex_t *forks);  // スレッド作成
void	*philo_routine(void *pointer);   // 各哲学者スレッドのメインルーチン
void	*monitor(void *pointer);         // 死亡監視スレッドのルーチン

/* ----------------------------------------------------------------------------
 * actions.c - 哲学者の行動関数群
 * 哲学者が行う各種行動（食事、睡眠、思考など）を実装する関数
 * ---------------------------------------------------------------------------- */
void	take_forks(t_philo *philo);      // フォークを取る動作
void	eat(t_philo *philo);             // 食事する動作
void	drop_forks(t_philo *philo);      // フォークを置く動作
void	philo_sleep(t_philo *philo);     // 睡眠する動作
void	think(t_philo *philo);           // 思考する動作

/* ----------------------------------------------------------------------------
 * monitor.c - 監視・チェック関数群
 * 哲学者の死亡チェックや食事完了チェックなどの監視機能
 * ---------------------------------------------------------------------------- */
int		philosopher_dead(t_philo *philo, size_t time_to_die);  // 個別哲学者の死亡チェック
int		check_death_and_set_flag(t_philo *philos);            // 死亡チェックとフラグ設定
int		check_if_dead(t_philo *philos);                       // 死亡状態の確認
int		check_if_all_ate(t_philo *philos);                    // 全員食事完了チェック

/* ----------------------------------------------------------------------------
 * utils2.c - 追加ユーティリティ関数群
 * 出力、比較、リソース解放などの補助的な関数
 * ---------------------------------------------------------------------------- */
void	print_message(char *str, t_philo *philo, int id);      // 安全なメッセージ出力
int		ft_strcmp(char *s1, char *s2);                        // 文字列比較
void	destroy_all(char *str, t_program *program,             // 全リソースの解放
			pthread_mutex_t *forks);

#endif
